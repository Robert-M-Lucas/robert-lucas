import ProjWrapper from "../../components/project_entry_utils/project_wrapper/ProjWrapper.tsx"
import normal_usage from "./assets/normal_usage.png"
import layout from "./assets/layout.png"
import editing from "./assets/editing.png"
import other_commands from "./assets/other_commands.txt"
import P_p from "../../components/project_entry_utils/P_p.tsx"
import P_a from "../../components/project_entry_utils/P_a.tsx"
import P_ul from "../../components/project_entry_utils/P_ul.tsx"
import P_li from "../../components/project_entry_utils/P_li.tsx"
import PMono from "../../components/project_entry_utils/PMono.tsx"
import P_h1 from "../../components/project_entry_utils/P_h1.tsx"
import P_ol from "../../components/project_entry_utils/P_ol.tsx"
import P_img from "../../components/project_entry_utils/P_img.tsx"
import PMarkdownSrc from "../../components/project_entry_utils/PMarkdownSrc.tsx"

export default function RssEntryPage() {
  return (
    <ProjWrapper>
      <P_h1>Introduction</P_h1>
      <P_p>
        I created RSS (RS like <PMono>.rs</PMono> files and S for script) as I
        wanted to use Rust as a scripting language due to its strong typing,
        matching patterns, and performance that Python lacks. While a
        single-file scripting format{" "}
        <P_a
          href={
            "https://doc.rust-lang.org/cargo/reference/unstable.html#script"
          }
        >
          does exist
        </P_a>
        , it is notably lacking some key features:
      </P_p>
      <P_ul>
        <P_li>It has almost non-existent IDE support (most important)</P_li>
        <P_li>
          Its compiled binaries stored in global directory (using space in a
          hidden way)
        </P_li>
        <P_li>Some Rust features/niceties require multiple files</P_li>
        <P_li>
          While Python doesn't have this either, storing a full project allows
          additional metadata files to be hidden in the single{" "}
          <PMono>rss</PMono> file
        </P_li>
      </P_ul>
      <P_h1>File Structure</P_h1>
      <P_p>
        My solution is quite simple however its implementation has some hidden
        complexities. In general, a full Rust project is simply stored as a zip
        in a single file, with an appended binary. Here is a full breakdown:
      </P_p>
      <P_ol>
        <P_li>
          A shebang to make the file executable with a{" "}
          <PMono>./my_file.rss</PMono> command on Linux. This must be at the
          start of the file to work.
        </P_li>
        <P_li>
          The length of the zipped project in bytes in a fixed-size integer
        </P_li>
        <P_li>The zipped project</P_li>
        <P_li>The length of the target triple</P_li>
        <P_li>
          The target triple indicating what target the attached binary is
          compiled for
        </P_li>
        <P_li>The length of the binary (0 if not present)</P_li>
        <P_li>The compiled binary</P_li>
        <P_li>
          The version of the file layout. This must be at the end as it must be
          in a known place between file layout versions and the shebang is at
          the start.
        </P_li>
      </P_ol>
      <P_img
        image={layout}
        alt={
          "Statistics about different parts of a .rss file, as generated by the RSS tool"
        }
        caption={
          <>
            File stats (with the <PMono>-v</PMono> verbose flag to show more
            information)
          </>
        }
      />
      <P_p>
        The layout indicator is particularly useful as it allows newer RSS
        version to identify older versions and suggest a solution. In general,
        however, the layout should remain stable and have very few changes.
      </P_p>
      <P_h1>Editing</P_h1>
      <P_p>
        Editing the file is really simple as it's just a matter of extracting
        the project to a temporary directory, starting an editor there, and, on
        close, compiling and creating the <PMono>rss</PMono> file by compressing
        the project structure and appending the binary. There is some extra
        consideration given for the normal use case as a new project will
        automatically include a temporary script in the project structure to{" "}
        <PMono>cargo run</PMono> the project in the original (non-temporary)
        directory for testing.
      </P_p>
      <P_p>
        There is also support for saving projects that don't compile, never
        saving the binary and regenerating it every <PMono>rss run</PMono>{" "}
        invocation, and, of course, the build (target) directory is always
        stripped before the project is compressed.
      </P_p>
      <P_img
        image={editing}
        alt={"Command line output of the process of editing an RSS file"}
        caption={
          <>
            Command line output of editing a RSS file (with the{" "}
            <PMono>-v</PMono> verbose flag to show more information)
          </>
        }
      />
      <P_h1>Execution</P_h1>
      <P_p>
        The file is executed by copying the binary portion of the file to a
        temporary file, running it, and then deleting the temporary file. The
        aforementioned shebang allows a <PMono>./my_file.rss</PMono> execution
        syntax by specifying that the file should be executed using the RSS
        tool.
      </P_p>

      <P_p>
        Should the target triple not match the current platform, or the binary
        not be appended to the file at all, the file goes through all the steps
        of editing the file (without actually opening the editor) to obtain a
        compiled binary that can be used. This is, of course, slower than having
        a precompiled binary but is still surprisingly fast and allows the file
        size to be smaller (although the <PMono>rss strip</PMono> command does
        allow the binary to be removed for easier sharing).
      </P_p>

      <P_h1>Other Commands</P_h1>

      <P_p>
        You can find the other utility commands for this tool listed on the{" "}
        <P_a href={"https://crates.io/crates/rs-script"}>crates.io page</P_a>.
        Here is an excerpt:
      </P_p>

      <PMarkdownSrc
        markdownSrc={other_commands}
        caption={"crates.io excerpt"}
      />

      <P_h1>Conclusion</P_h1>
      <P_p>
        While initially I thought that using a full Rust project structure might
        be too clunky, this has quickly turned into a tool I use all the time
        due to its frictionless interface.
      </P_p>

      <P_img
        image={normal_usage}
        alt={"Command line output of running an RSS word-counter script"}
        caption={
          "My typical usage, in this case a word counter being used in my notes folder"
        }
      />
    </ProjWrapper>
  )
}
