for (attribute_name, attribute_type) in attributes {
    let offset = size;

    if attribute_type.indirection().has_indirection() {
        // Indirection mean fixed size
        size += POINTER_SIZE;
    } else if let Some(sized_type) = final_types.get(attribute_type.type_id()) {
        // Type already processed
        size += *sized_type.size();
    } else if let Some(sized_type) = global_table.try_get_type(*attribute_type.type_id()) {
        // Built-in type already processed
        size += sized_type.size();
    } else if let Some(unsized_type) = unsized_types.remove(attribute_type.type_id()) {
        // Recurse
        size +=
            match resolve_type_sizes(unsized_type, final_types, unsized_types, global_table)? {
                Ok(s) => s,
                Err(mut e) => {
                    // Bubble up a circular definition error while adding the current type for
                    // use in an error message
                    e.push((name, id, location));
                    return Ok(Err(e));
                }
            };
    } else {
        // Type not in unsized_types or type table due to circular definition
        // A list is created here with the current type. As the error bubbles up, all the types
        // that make up the circular definition will be added for use in an error message
        return Ok(Err(vec![
            (
                String::new(),
                *attribute_type.type_id(),
                Location::builtin(),
            ),
            (name, id, location),
        ]));
    }

    processed_attributes.push((offset, attribute_name, attribute_type));
}